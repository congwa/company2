{
    "version": 3,
    "sources": [
        "../../../src/api/controller/auth.js"
    ],
    "names": [
        "Base",
        "require",
        "module",
        "exports",
        "loginByWeixinAction",
        "code",
        "post",
        "fullUserInfo",
        "clientIp",
        "ctx",
        "ip",
        "userInfo",
        "service",
        "login",
        "think",
        "isEmpty",
        "fail",
        "userId",
        "model",
        "where",
        "weixin_openid",
        "openId",
        "getField",
        "add",
        "username",
        "uuid",
        "password",
        "register_time",
        "parseInt",
        "Date",
        "getTime",
        "register_ip",
        "mobile",
        "avatar",
        "avatarUrl",
        "gender",
        "nickname",
        "nickName",
        "newUserInfo",
        "field",
        "id",
        "find",
        "update",
        "last_login_time",
        "last_login_ip",
        "TokenSerivce",
        "sessionKey",
        "create",
        "user_id",
        "success",
        "token",
        "logoutAction"
    ],
    "mappings": ";;AAAA,MAAMA,OAAOC,QAAQ,WAAR,CAAb;;AAEAC,OAAOC,OAAP,GAAiB,cAAcH,IAAd,CAAmB;AAC5BI,qBAAN,GAA4B;AAAA;;AAAA;AAC1B,YAAMC,OAAO,MAAKC,IAAL,CAAU,MAAV,CAAb;AACA,YAAMC,eAAe,MAAKD,IAAL,CAAU,UAAV,CAArB;AACA,YAAME,WAAW,MAAKC,GAAL,CAASC,EAA1B;;AAEA;AACA,YAAMC,WAAW,MAAM,MAAKC,OAAL,CAAa,QAAb,EAAuB,KAAvB,EAA8BC,KAA9B,CAAoCR,IAApC,EAA0CE,YAA1C,CAAvB;AACA,UAAIO,MAAMC,OAAN,CAAcJ,QAAd,CAAJ,EAA6B;AAC3B,eAAO,MAAKK,IAAL,CAAU,MAAV,CAAP;AACD;;AAED;AACA,UAAIC,SAAS,MAAM,MAAKC,KAAL,CAAW,MAAX,EAAmBC,KAAnB,CAAyB,EAAEC,eAAeT,SAASU,MAA1B,EAAzB,EAA6DC,QAA7D,CAAsE,IAAtE,EAA4E,IAA5E,CAAnB;AACA,UAAIR,MAAMC,OAAN,CAAcE,MAAd,CAAJ,EAA2B;AACzB;AACAA,iBAAS,MAAM,MAAKC,KAAL,CAAW,MAAX,EAAmBK,GAAnB,CAAuB;AACpCC,oBAAU,SAASV,MAAMW,IAAN,CAAW,CAAX,CADiB;AAEpCC,oBAAU,EAF0B;AAGpCC,yBAAeC,SAAS,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAhC,CAHqB;AAIpCC,uBAAavB,QAJuB;AAKpCwB,kBAAQ,EAL4B;AAMpCZ,yBAAeT,SAASU,MANY;AAOpCY,kBAAQtB,SAASuB,SAAT,IAAsB,EAPM;AAQpCC,kBAAQxB,SAASwB,MAAT,IAAmB,CARS,EAQN;AAC9BC,oBAAUzB,SAAS0B;AATiB,SAAvB,CAAf;AAWD;;AAED;AACA,YAAMC,cAAc,MAAM,MAAKpB,KAAL,CAAW,MAAX,EAAmBqB,KAAnB,CAAyB,CAAC,IAAD,EAAO,UAAP,EAAmB,UAAnB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD,UAAnD,CAAzB,EAAyFpB,KAAzF,CAA+F,EAAEqB,IAAIvB,MAAN,EAA/F,EAA+GwB,IAA/G,EAA1B;;AAEA;AACAxB,eAAS,MAAM,MAAKC,KAAL,CAAW,MAAX,EAAmBC,KAAnB,CAAyB,EAAEqB,IAAIvB,MAAN,EAAzB,EAAyCyB,MAAzC,CAAgD;AAC7DC,yBAAiBf,SAAS,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAhC,CAD4C;AAE7Dc,uBAAepC;AAF8C,OAAhD,CAAf;;AAKA,YAAMqC,eAAe,MAAKjC,OAAL,CAAa,OAAb,EAAsB,KAAtB,CAArB;AACA,YAAMkC,aAAa,MAAMD,aAAaE,MAAb,CAAoB,EAAEC,SAAS/B,MAAX,EAApB,CAAzB;;AAEA,UAAIH,MAAMC,OAAN,CAAcuB,WAAd,KAA8BxB,MAAMC,OAAN,CAAc+B,UAAd,CAAlC,EAA6D;AAC3D,eAAO,MAAK9B,IAAL,CAAU,MAAV,CAAP;AACD;;AAED,aAAO,MAAKiC,OAAL,CAAa,EAAEC,OAAOJ,UAAT,EAAqBnC,UAAU2B,WAA/B,EAAb,CAAP;AA5C0B;AA6C3B;;AAEKa,cAAN,GAAqB;AAAA;;AAAA;AACnB,aAAO,OAAKF,OAAL,EAAP;AADmB;AAEpB;AAlDiC,CAApC",
    "file": "../../../src/api/controller/auth.js",
    "sourcesContent": [
        "const Base = require('./base.js');\n\nmodule.exports = class extends Base {\n  async loginByWeixinAction() {\n    const code = this.post('code');\n    const fullUserInfo = this.post('userInfo');\n    const clientIp = this.ctx.ip;\n\n    // 解释用户数据\n    const userInfo = await this.service('weixin', 'api').login(code, fullUserInfo);\n    if (think.isEmpty(userInfo)) {\n      return this.fail('登录失败');\n    }\n\n    // 根据openid查找用户是否已经注册\n    let userId = await this.model('user').where({ weixin_openid: userInfo.openId }).getField('id', true);\n    if (think.isEmpty(userId)) {\n      // 注册\n      userId = await this.model('user').add({\n        username: '微信用户' + think.uuid(6),\n        password: '',\n        register_time: parseInt(new Date().getTime() / 1000),\n        register_ip: clientIp,\n        mobile: '',\n        weixin_openid: userInfo.openId,\n        avatar: userInfo.avatarUrl || '',\n        gender: userInfo.gender || 1, // 性别 0：未知、1：男、2：女\n        nickname: userInfo.nickName\n      });\n    }\n\n    // 查询用户信息\n    const newUserInfo = await this.model('user').field(['id', 'username', 'nickname', 'gender', 'avatar', 'birthday']).where({ id: userId }).find();\n\n    // 更新登录信息\n    userId = await this.model('user').where({ id: userId }).update({\n      last_login_time: parseInt(new Date().getTime() / 1000),\n      last_login_ip: clientIp\n    });\n\n    const TokenSerivce = this.service('token', 'api');\n    const sessionKey = await TokenSerivce.create({ user_id: userId });\n\n    if (think.isEmpty(newUserInfo) || think.isEmpty(sessionKey)) {\n      return this.fail('登录失败');\n    }\n\n    return this.success({ token: sessionKey, userInfo: newUserInfo });\n  }\n\n  async logoutAction() {\n    return this.success();\n  }\n};\n"
    ]
}